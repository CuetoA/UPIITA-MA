
P3-MatrixKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001c07  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000076e  00000000  00000000  00001e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000900  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001cc  00000000  00000000  00002ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000211  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000108c  00000000  00000000  000032a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  00004331  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000f4  000000f4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.BARRE_TECLADO 00000028  000000bc  000000bc  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.main    00000010  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	e8 e6       	ldi	r30, 0x68	; 104
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	17 c0       	rjmp	.+46     	; 0xaa <__do_clear_bss+0x8>
  7c:	b5 91       	lpm	r27, Z+
  7e:	a5 91       	lpm	r26, Z+
  80:	35 91       	lpm	r19, Z+
  82:	25 91       	lpm	r18, Z+
  84:	05 91       	lpm	r16, Z+
  86:	07 fd       	sbrc	r16, 7
  88:	0c c0       	rjmp	.+24     	; 0xa2 <__do_clear_bss>
  8a:	95 91       	lpm	r25, Z+
  8c:	85 91       	lpm	r24, Z+
  8e:	ef 01       	movw	r28, r30
  90:	f9 2f       	mov	r31, r25
  92:	e8 2f       	mov	r30, r24
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0x20>
  9e:	fe 01       	movw	r30, r28
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__do_clear_bss+0x8>

000000a2 <__do_clear_bss>:
  a2:	1d 92       	st	X+, r1
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__do_clear_bss>
  aa:	e8 36       	cpi	r30, 0x68	; 104
  ac:	f4 07       	cpc	r31, r20
  ae:	31 f7       	brne	.-52     	; 0x7c <__do_copy_data+0x8>
  b0:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  b4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>

Disassembly of section .text:

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.BARRE_TECLADO:

000000bc <BARRE_TECLADO>:
		POS_LINEA2(0);
		
}
void PARPA()
{
	ENVIA_CMD(0x0F);   //0000 1111
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 3d       	cpi	r24, 0xDF	; 223
  c0:	41 f0       	breq	.+16     	; 0xd2 <BARRE_TECLADO+0x16>
  c2:	8f 3e       	cpi	r24, 0xEF	; 239
  c4:	19 f0       	breq	.+6      	; 0xcc <BARRE_TECLADO+0x10>
  c6:	8f 3b       	cpi	r24, 0xBF	; 191
  c8:	51 f4       	brne	.+20     	; 0xde <BARRE_TECLADO+0x22>
  ca:	06 c0       	rjmp	.+12     	; 0xd8 <BARRE_TECLADO+0x1c>
  cc:	8f ed       	ldi	r24, 0xDF	; 223
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	08 95       	ret
  d2:	8f eb       	ldi	r24, 0xBF	; 191
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	08 95       	ret
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	08 95       	ret
  de:	8f ee       	ldi	r24, 0xEF	; 239
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	08 95       	ret

Disassembly of section .text.main:

000000e4 <main>:
	*	- PORTD ? Input
	*	- PORTC ? Output (LCD)
	*	- PORTB ? Others
	*/
	
	DDRD =0xF0;		// O / I  in D,   Output: High Nibble,	Input: Low Nibble
  e4:	80 ef       	ldi	r24, 0xF0	; 240
  e6:	8a b9       	out	0x0a, r24	; 10
	PORTD=0xF0;		// 5Volts in D
  e8:	8b b9       	out	0x0b, r24	; 11
	DDRC =0xFF;		// Output in C
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 b9       	out	0x07, r24	; 7
	
    while(1)
    {
        BARRE_TECLADO();
  ee:	0e 94 5e 00 	call	0xbc	; 0xbc <__data_load_end>
  f2:	fd cf       	rjmp	.-6      	; 0xee <main+0xa>
