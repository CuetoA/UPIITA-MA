
P6-timer-ctc-sqare-signal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000100  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000012f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000883  00000000  00000000  0000014f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005ed  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e1  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  000000a8  000000a8  000000fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.main    00000028  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  54:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  58:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  5c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  60:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	cli();
  80:	f8 94       	cli
	GTCCR = (1<<TSM) | (1<<PSRSYNC);
  82:	81 e8       	ldi	r24, 0x81	; 129
  84:	83 bd       	out	0x23, r24	; 35
	
	OCR1A = 200;					// Ctc value
  86:	88 ec       	ldi	r24, 0xC8	; 200
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	DDRB   = (1<<DDB1);				// Output
  92:	82 e0       	ldi	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A0);			// Toggle when ctc
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS10);// WMG12 to ctc && CS12 to 256 prescaler
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	GTCCR = 0;
  a2:	13 bc       	out	0x23, r1	; 35
	sei();
  a4:	78 94       	sei
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x26>
