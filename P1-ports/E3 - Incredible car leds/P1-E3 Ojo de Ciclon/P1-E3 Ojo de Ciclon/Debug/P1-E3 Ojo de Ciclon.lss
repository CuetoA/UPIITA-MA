
P1-E3 Ojo de Ciclon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e6  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000956  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000066f  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000241  00000000  00000000  000011fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .text         00000004  0000014c  0000014c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .text.main    00000084  000000c8  000000c8  0000015c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .bss.flag     00000002  00800100  00800100  000001e6  2**0
                  ALLOC
 14 .data.var     00000002  00800102  00000150  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 02       	muls	r16, r17
  6c:	80 01       	movw	r16, r0
  6e:	02 01       	movw	r0, r4
  70:	04 00       	.word	0x0004	; ????
  72:	01 50       	subi	r16, 0x01	; 1

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c8 <main>:
int flag = 0;


int main(void){

	DDRD = 0B00111111;		// d=63 , h=3F , b=0011 1111
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	8a b9       	out	0x0a, r24	; 10
	PORTD= 0B00111111;		// d=63 , h=3F , b=0011 1111
  cc:	8b b9       	out	0x0b, r24	; 11
	
    while(1){
		
        if (flag == 0){ var *= 2;}
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	89 2b       	or	r24, r25
  d8:	59 f4       	brne	.+22     	; 0xf0 <main+0x28>
  da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <var>
  de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <var+0x1>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <var+0x1>
  ea:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <var>
  ee:	0d c0       	rjmp	.+26     	; 0x10a <main+0x42>
        else { var /= 2;}
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <var>
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <var+0x1>
  f8:	99 23       	and	r25, r25
  fa:	0c f4       	brge	.+2      	; 0xfe <main+0x36>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	95 95       	asr	r25
 100:	87 95       	ror	r24
 102:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <var+0x1>
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <var>

        // Aquí debemos imprimir el resultado
		PORTD = var;
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <var>
 10e:	8b b9       	out	0x0b, r24	; 11
		
        if (var == 128)
 110:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <var>
 114:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <var+0x1>
 118:	80 38       	cpi	r24, 0x80	; 128
 11a:	91 05       	cpc	r25, r1
 11c:	39 f4       	brne	.+14     	; 0x12c <main+0x64>
        flag = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	06 c0       	rjmp	.+12     	; 0x138 <main+0x70>
        else if (var == 1)
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	21 f4       	brne	.+8      	; 0x138 <main+0x70>
        flag = 0;
 130:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 134:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 e6       	ldi	r24, 0x69	; 105
 13c:	98 e1       	ldi	r25, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x76>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x80>
 148:	00 00       	nop
 14a:	c1 cf       	rjmp	.-126    	; 0xce <main+0x6>
